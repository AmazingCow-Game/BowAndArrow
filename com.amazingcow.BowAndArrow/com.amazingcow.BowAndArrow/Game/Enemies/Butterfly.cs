/*#region Usings//Systemusing System;using System.Collections.Generic;//Xnausing Microsoft.Xna.Framework;#endregion //Usingsnamespace com.amazingcow.BowAndArrow{    public class Butterfly : Enemy    {        #region Public Properties         public override Vector2 Position        {            get { return CurrentSprite.Position; }            set             {                  foreach(var sprite in _spriteList)                    sprite.Position = value;             }        }        #endregion //Public Properties         #region Constants         private const int kSpriteIndexAlive = 0;        private const int kSpriteIndexDying = 1;        private const int kSpriteIndexSize  = 2;        #endregion        #region iVars         List<Sprite> _spriteList;        #endregion //iVars        #region CTOR        public Butterfly() :             base()        {            //             _spriteList = new List<Sprite>(kSpriteIndexSize);            _spriteList.Add(new Sprite("butterfly_bubled"));            _spriteList.Add(new Sprite("butterfly"));            CurrentSprite = _spriteList[kSpriteIndexAlive];        }        #endregion //CTOR        #region Update / Draw        public override void Update(GameTime gt)        {            //Ballon is already dead - Don't need to do anything else.            if(CurrentState == State.Dead)                return;            //Update the position.            Position += (Speed * (gt.ElapsedGameTime.Milliseconds / 1000f));            var windowHeight = GameManager.Instance.GraphicsDevice.Viewport.Height;            var windowWidth  = GameManager.Instance.GraphicsDevice.Viewport.Width;            //On State.Alive -> If Balloon goes up of top of window             //reset it to the bottom of the window.            if(CurrentState == State.Alive &&               Position.Y + CurrentSprite.BoundingBox.Height <= 0)             {                Position = new Vector2(Position.X, windowHeight);            }            //On State.Dying -> If Balloon goes down of the window's            //bottom, set the state to died.            else if(CurrentState == State.Dying &&                    Position.Y >= windowHeight)            {                Speed        = Vector2.Zero;                CurrentState = State.Dead;            }        }        public override void Draw(GameTime gt)        {            if(CurrentState == State.Dead)                return;            CurrentSprite.Draw(gt);        }        #endregion //Update / Draw        #region Public Methods         public override void Kill()        {            if(CurrentState != State.Alive)                return;            CurrentState  = State.Dying;            CurrentSprite = _spriteList[kSpriteIndexDying];            Speed = new Vector2(-20, -80);        }        #endregion //Public Methods     }}*/