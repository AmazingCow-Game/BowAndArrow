/*#region Usings//Systemusing System;using System.Collections.Generic;//Xnausing Microsoft.Xna.Framework;#endregion //Usingsnamespace com.amazingcow.BowAndArrow{    public class Slime : Enemy    {        #region Public Properties         public override Vector2 Position        {            get { return CurrentSprite.Position; }            set             {                  foreach(var sprite in _spriteList)                    sprite.Position = value;             }        }        #endregion //Public Properties         #region Constants         private const int kSpriteIndexAlive = 0;        private const int kSpriteIndexDying = 1;        private const int kSpriteIndexSize  = 2;        #endregion        #region iVars         List<Sprite> _spriteList;        Clock        _dieClock;        #endregion //iVars        #region CTOR        public Slime() :             base()        {            //Initialize the Sprites.            _spriteList = new List<Sprite>(kSpriteIndexSize);            _spriteList.Add(new Sprite("slime"));            _spriteList.Add(new Sprite("slime_dead"));            CurrentSprite = _spriteList[kSpriteIndexAlive];            //Initialize the Timers.            _dieClock = new Clock(500, 1);            _dieClock.OnTick += onDieClockTick;        }        #endregion //CTOR        #region Update / Draw        public override void Update(GameTime gt)        {            //Ballon is already dead - Don't need to do anything else.            if(CurrentState == State.Dead)                return;            //Update the timers.            _dieClock.Update(gt.ElapsedGameTime.Milliseconds);            //Update the position.            Position += (Speed * (gt.ElapsedGameTime.Milliseconds / 1000f));            //On State.Alive - Slime only goes to left...            if(CurrentState == State.Alive &&               Position.X + CurrentSprite.BoundingBox.Width <= 0)             {                //Die...            }        }        public override void Draw(GameTime gt)        {            if(CurrentState == State.Dead)                return;            CurrentSprite.Draw(gt);        }        #endregion //Update / Draw        #region Public Methods         public override void Kill()        {            if(CurrentState != State.Alive)                return;            CurrentState  = State.Dying;            CurrentSprite = _spriteList[kSpriteIndexDying];            _dieClock.Start();            Speed = Vector2.Zero;        }        #endregion //Public Methods         void onDieClockTick(object sender, EventArgs e)        {            //Remove the listner, stop the clock             //and set that this monster is dead.            _dieClock.OnTick -= onDieClockTick;            _dieClock.Stop();            CurrentState = State.Dead;        }    }}*/